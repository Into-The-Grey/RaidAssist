name: Build Windows EXE (Manual)

on:
  workflow_dispatch:

jobs:
  build-exe:
    runs-on: windows-latest

    env:
      # Inject secrets as env variablesâ€”NEVER store in repo or .env
      BUNGIE_API_KEY: ${{ secrets.BUNGIE_API_KEY }}
      BUNGIE_CLIENT_ID: ${{ secrets.BUNGIE_CLIENT_ID }}
      BUNGIE_CLIENT_SECRET: ${{ secrets.BUNGIE_CLIENT_SECRET }}
      BUNGIE_REDIRECT_URI: ${{ secrets.BUNGIE_REDIRECT_URI }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/dev-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Upgrade pip and wheel
        run: |
          python -m pip install --upgrade pip wheel setuptools

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r dev-requirements.txt
          pip install pyinstaller

      - name: Create logs directory
        run: mkdir logs

      - name: Verify systems
        run: |
          python tests/run_tests.py --systems || echo "System verification completed with warnings"

      - name: Check required secrets
        run: |
          $missing = @()
          if ([string]::IsNullOrEmpty($env:BUNGIE_API_KEY)) { $missing += "BUNGIE_API_KEY" }
          if ([string]::IsNullOrEmpty($env:BUNGIE_CLIENT_ID)) { $missing += "BUNGIE_CLIENT_ID" }
          if ([string]::IsNullOrEmpty($env:BUNGIE_CLIENT_SECRET)) { $missing += "BUNGIE_CLIENT_SECRET" }
          if ([string]::IsNullOrEmpty($env:BUNGIE_REDIRECT_URI)) { $missing += "BUNGIE_REDIRECT_URI" }
          if ($missing.Count -gt 0) {
            Write-Error "Missing required secrets: $($missing -join ', '). Build failed."
            exit 1
          }
          Write-Output "All required secrets are present."
        shell: pwsh

      - name: Verify secrets for build
        run: |
          Write-Output "Checking secret availability (values hidden for security):"
          Write-Output "BUNGIE_API_KEY: $([string]::IsNullOrEmpty($env:BUNGIE_API_KEY) ? 'NOT SET' : 'SET')"
          Write-Output "BUNGIE_CLIENT_ID: $([string]::IsNullOrEmpty($env:BUNGIE_CLIENT_ID) ? 'NOT SET' : 'SET')"
          Write-Output "BUNGIE_CLIENT_SECRET: $([string]::IsNullOrEmpty($env:BUNGIE_CLIENT_SECRET) ? 'NOT SET' : 'SET')"
          Write-Output "BUNGIE_REDIRECT_URI: $([string]::IsNullOrEmpty($env:BUNGIE_REDIRECT_URI) ? 'NOT SET' : 'SET')"
        shell: pwsh

      - name: Build with PyInstaller
        run: pyinstaller raidassist.spec

      - name: Upload built EXE as artifact
        uses: actions/upload-artifact@v4
        with:
          name: RaidAssist-Windows
          path: dist/**

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Build-Logs
          path: logs/
